AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ProjectSaes

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Environment:
      Variables:
        RDS_USERNAME: admin
        RDS_PASSWORD: SAESdb2024.
        RDS_SECRET_NAME: prod/saes/Mysql
        REGION_NAME: us-east-1
        USER_POOL_ID: us-east-1_bUmZ4j6DU
        RDS_DB_NAME: user_management
        RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com

Resources:

  ### IAM Role for Lambda Functions ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:us-east-1:654654356618:secret:prod/saes/*
        - PolicyName: RDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: arn:aws:rds:us-east-1:654654356618:db:saesdb
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:GetGroup
                  - cognito-idp:ListUsers
                Resource: arn:aws:cognito-idp:us-east-1:654654356618:userpool/us-east-1_bUmZ4j6DU

  ### API Gateway with Cognito Authentication ###
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: ProjectSaesApi
      StageName: Prod
      Auth:
        Authorizers:
          CognitoUserAuthorizer:  # Nombre del Authorizer
            UserPoolArn: arn:aws:cognito-idp:us-east-1:654654356618:userpool/us-east-1_bUmZ4j6DU
            IdentitySource: method.request.header.Authorization
            ProviderARNs:
              - arn:aws:cognito-idp:us-east-1:654654356618:userpool/us-east-1_bUmZ4j6DU
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  ### Lambda Functions ###
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: post
      Environment:
        Variables:
          RDS_USERNAME: admin
          RDS_PASSWORD: SAESdb2024.
          RDS_SECRET_NAME: prod/saes/Mysql
          REGION_NAME: us-east-1
          USER_POOL_ID: us-east-1_bUmZ4j6DU
          RDS_DB_NAME: user_management
          RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{id}
            Method: get
            Auth:
              Authorizer: CognitoUserAuthorizer  # Utiliza el CognitoUserAuthorizer
      Environment:
        Variables:
          RDS_USERNAME: admin
          RDS_PASSWORD: SAESdb2024.
          RDS_SECRET_NAME: prod/saes/Mysql
          REGION_NAME: us-east-1
          RDS_DB_NAME: user_management
          RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com
          USER_POOL_ID: us-east-1_bUmZ4j6DU

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{id}
            Method: put
            Auth:
              Authorizer: CognitoUserAuthorizer  # Utiliza el CognitoUserAuthorizer
      Environment:
        Variables:
          RDS_USERNAME: admin
          RDS_PASSWORD: SAESdb2024.
          RDS_SECRET_NAME: prod/saes/Mysql
          REGION_NAME: us-east-1
          RDS_DB_NAME: user_management
          RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com
          USER_POOL_ID: us-east-1_bUmZ4j6DU

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{id}
            Method: delete
            Auth:
              Authorizer: CognitoUserAuthorizer  # Utiliza el CognitoUserAuthorizer
      Environment:
        Variables:
          RDS_USERNAME: admin
          RDS_PASSWORD: SAESdb2024.
          RDS_SECRET_NAME: prod/saes/Mysql
          REGION_NAME: us-east-1
          RDS_DB_NAME: user_management
          RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com
          USER_POOL_ID: us-east-1_bUmZ4j6DU

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /login
            Method: post
      Environment:
        Variables:
          REGION_NAME: us-east-1
          USER_POOL_ID: us-east-1_bUmZ4j6DU
          CLIENT_ID: g9uctiai3rvu4g541qfvkn6q8

  GetUserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_user_profile/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/profile
            Method: get
            Auth:
              Authorizer: CognitoUserAuthorizer  # Utiliza el CognitoUserAuthorizer
      Environment:
        Variables:
          RDS_USERNAME: admin
          RDS_PASSWORD: SAESdb2024.
          RDS_SECRET_NAME: prod/saes/Mysql
          REGION_NAME: us-east-1
          RDS_DB_NAME: user_management
          RDS_ENDPOINT: saesdb.c9gsy08uohy5.us-east-1.rds.amazonaws.com

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
